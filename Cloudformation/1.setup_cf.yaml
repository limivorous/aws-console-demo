---
AWSTemplateFormatVersion: "2010-09-09"

Description: >
  This is the initial cloudformation template for the aws console demo.
  The documentation and git repo for this project is contained at:
  https://github.com/limivorous/aws-console-demo.

Parameters:
  pDemoSubnet:
    Description: What subnet would you like for the Demo environment? If you don't know then leave this as is.
    Type: String
    Default: 10.90.128.0/20 #This default gives us the range to 10.90.143.254
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'

Resources:

  ###################################
  #
  #   VPC
  #
  ###################################


  # We are only using a single VPC for this demo. We need to make hosts public for later in the demo so DNS is enabled.

  DemoVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref pDemoSubnet
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Stage
          Value: 'Demo'
        - Key: Name
          Value: 'Demo VPC'

  DemoVPCSSM:
    Type: "AWS::SSM::Parameter"
    Properties:
      Description: "The DemoVPC ID"
      Name: "DemoVPCID"
      Type: String # AWS::EC2::VPC::Id
      Value: !Ref DemoVPC

  ###################################
  #
  #  Subnets
  #
  ###################################

  #Public subnets - 3 created.

  DemoPublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Sub '${AWS::Region}a'
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt DemoVPC.CidrBlock, 9, 8 ]]
      VpcId: !Ref DemoVPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'Demo Public Subnet A'
  DemoPublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Sub '${AWS::Region}b'
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt DemoVPC.CidrBlock, 9, 8 ]]
      VpcId: !Ref DemoVPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'Demo Public Subnet B'
  DemoPublicSubnetC:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Sub '${AWS::Region}c'
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt DemoVPC.CidrBlock, 9, 8 ]]
      VpcId: !Ref DemoVPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'Demo Public Subnet C'


  #Private subnets - 3 created.

  DataPrivateSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Sub '${AWS::Region}a'
      CidrBlock: !Select [ 6, !Cidr [ !GetAtt DemoVPC.CidrBlock, 9, 8 ]]
      VpcId: !Ref DemoVPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: 'Demo Data Subnet A'
  DataPrivateSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Sub '${AWS::Region}b'
      CidrBlock: !Select [ 7, !Cidr [ !GetAtt DemoVPC.CidrBlock, 9, 8 ]]
      VpcId: !Ref DemoVPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: 'Demo Data Subnet B'
  DataPrivateSubnetC:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Sub '${AWS::Region}c'
      CidrBlock: !Select [ 8, !Cidr [ !GetAtt DemoVPC.CidrBlock, 9, 8 ]]
      VpcId: !Ref DemoVPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: 'Demo Data Subnet C'

  DemoDataPrivateSubnetASSM:
    Type: "AWS::SSM::Parameter"
    Properties:
      Description: "The DataSubnet A ID"
      Name: "DataSubnetAID"
      Type: String # AWS::EC2::Subnet::Id
      Value: !Ref DataPrivateSubnetA
  DemoDataPrivateSubnetBSSM:
    Type: "AWS::SSM::Parameter"
    Properties:
      Description: "The DataSubnet B ID"
      Name: "DataSubnetBID"
      Type: String # AWS::EC2::Subnet::Id
      Value: !Ref DataPrivateSubnetB
  DemoDataPrivateSubnetCSSM:
    Type: "AWS::SSM::Parameter"
    Properties:
      Description: "The DataSubnet C ID"
      Name: "DataSubnetCID"
      Type: String # AWS::EC2::Subnet::Id
      Value: !Ref DataPrivateSubnetC


  ###################################
  #
  #  Internet Gateway
  #
  ###################################

  #Gateway and attachment to VPC

  DemoInetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Stage
          Value: 'Demo'
        - Key: Name
          Value: 'Demo Internet Gateway'
  DemoAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref DemoVPC
      InternetGatewayId: !Ref DemoInetGateway

  ###################################
  #
  #  Route tables
  #
  ###################################


  #Route tables and associations + default route
  #Public Subnets
  DemoPublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DemoVPC
      Tags:
        - Key: Stage
          Value: 'Demo'
        - Key: Name
          Value: 'Demo Public Subnets Routes'

  DemoPublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DemoPublicSubnetA
      RouteTableId: !Ref DemoPublicSubnetRouteTable
  DemoPublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DemoPublicSubnetB
      RouteTableId: !Ref DemoPublicSubnetRouteTable
  DemoPublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DemoPublicSubnetC
      RouteTableId: !Ref DemoPublicSubnetRouteTable


  #Route tables and associations + default route
  #Public Subnets
  DemoDataSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DemoVPC
      Tags:
        - Key: Stage
          Value: 'Demo'
        - Key: Name
          Value: 'Demo Private Subnets Routes'

  DemoDataSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DataPrivateSubnetA
      RouteTableId: !Ref DemoDataSubnetRouteTable
  DemoDataSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DataPrivateSubnetB
      RouteTableId: !Ref DemoDataSubnetRouteTable
  DemoDataSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DataPrivateSubnetC
      RouteTableId: !Ref DemoDataSubnetRouteTable


  ###################################
  #
  #  Routes
  #
  ###################################


  #Routes for Public Subnets - via each of the gateway
  DemoPublicARoutetoInet: #Only going to create one of these as the default (for local routing) is auto created
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref DemoPublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref DemoInetGateway



  ###################################
  #
  #  NACLs
  #
  ###################################


  #NACL Definitions

  DemoPublicNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
        - Key: Name
          Value: 'Demo Public NACL'
      VpcId: !Ref DemoVPC
  URLCheckerNACLPublicSubnetAAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref DemoPublicSubnetA
      NetworkAclId: !Ref DemoPublicNACL
  URLCheckerNACLPublicSubnetBAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref DemoPublicSubnetB
      NetworkAclId: !Ref DemoPublicNACL
  URLCheckerNACLPublicSubnetCAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref DemoPublicSubnetC
      NetworkAclId: !Ref DemoPublicNACL

  #NACL Rules Public
  #Ingres

  DemoNACLInboundRDP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DemoPublicNACL
      RuleNumber: 100
      Protocol: 6 # TCP innit!
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0 #Not ideal but for the demo this will be ok.
      PortRange:
        From: 3389
        To: 3389

  DemoNACLInboundHighPorts:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DemoPublicNACL
      RuleNumber: 140
      Protocol: 6 # TCP innit!
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0 #Not as much of a problem as this is hand off traffic.
      PortRange:
        From: 1024
        To: 65535

  #NACL Rules Public
  #Egress

  DemoNACLOutboundHighPorts:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DemoPublicNACL
      RuleNumber: 140
      Protocol: 6 # TCP innit!
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0 #Also not so much of a problem as this is hand off traffic
      PortRange:
        From: 1024
        To: 65535



  ###################################
  #
  #  Security Groups
  #
  ###################################


  WindowsServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref DemoVPC
      GroupName: 'Demo Windows Security Group'
      GroupDescription: 'Enable RDP Access'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 3389
          IpProtocol: tcp
          ToPort: 3389
      Tags:
        - Key: Name
          Value: 'Demo Windows Security Group'

  DemoWindowsSSGSSM:
    Type: "AWS::SSM::Parameter"
    Properties:
      Description: "The Windows Server Security Group ID"
      Name: "WindowsSSG"
      Type: String # AWS::EC2::SecurityGroup::Id
      Value: !Ref WindowsServerSecurityGroup
